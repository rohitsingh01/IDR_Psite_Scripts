import http.client
import json
import matplotlib.pyplot as plt

def get_iupred(uniprot_id):
    # Function generated by Postman API service to retrieve disordered region of proteins based on Uniprot IDs
    conn = http.client.HTTPSConnection("aiupred.elte.hu")
    payload = ''
    headers = {}
    conn.request("GET", f"/rest_api?accession={uniprot_id}", payload, headers)
    res = conn.getresponse()
    data = res.read()
    return json.loads(data.decode("utf-8"))


def calculate_longest_disordered_region(aiupred_data):

    iupred_scores = aiupred_data["AIUPred"]
    threshold = 0.5
    longest_length = 0
    current_length = 0
    longest_region_start = None
    longest_region_end = None
    current_start = None

    for i, score in enumerate(iupred_scores):
        if score > threshold:
            if current_start is None:
                current_start = i + 1  # Convert 0-based index to 1-based position
            current_length += 1
            if current_length > longest_length:
                longest_length = current_length
                longest_region_start = current_start
                longest_region_end = i + 1  # Convert 0-based index to 1-based position
        else:
            current_length = 0
            current_start = None

    print(f"Longest disordered region: start={longest_region_start}, end={longest_region_end}, length={longest_length}")
    return longest_length, longest_region_start, longest_region_end

def plot_longest_disordered_regions(uniprot_ids, longest_regions):
    # Sort by longest_regions to prioritize the longest ones
    sorted_ids = [id for _, id in sorted(zip(longest_regions, uniprot_ids), reverse=True)]
    sorted_longest_regions = sorted(longest_regions, reverse=True)
    
    fig, ax = plt.subplots(figsize=(15, 6))  # Increase figsize for better layout
    
    # Plotting all proteins
    ax.bar(range(len(uniprot_ids)), sorted_longest_regions, color='skyblue')
    ax.set_xlabel('Protein Index')
    ax.set_ylabel('Length of Longest Disordered Region')
    ax.set_title('Proteins by Length of Longest Disordered Region')
    ax.set_xticks(range(len(uniprot_ids)))
    ax.set_xticklabels(sorted_ids, rotation=90)  # Use IDs as labels
    plt.tight_layout()
    plt.show()
def find_psite_percentile(psite, iupred_scores):
    count_disordered = sum(1 for score in iupred_scores if score > 0.5)
    if count_disordered == 0:
        return None
    return sum(1 for score in iupred_scores[:psite] if score > 0.5) / count_disordered

def plot_psite_percentiles(uniprot_ids, psites_filtered, percentiles):
    if len(psites_filtered) != len(percentiles):
        raise ValueError("psites_filtered and percentiles must have the same length.")

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.scatter(uniprot_ids, psites_filtered, c=percentiles, cmap='coolwarm', s=100)
    ax.set_xlabel('UniProt IDs')
    ax.set_ylabel('Phosphorylation Site Position')
    ax.set_title('Percentile Position of Phosphorylation Sites in Disordered Regions')
    ax.xaxis.set_tick_params(rotation=90)
    cbar = plt.colorbar()
    cbar.set_label('Percentile')
    plt.tight_layout()
    plt.show()
    
def main():
    # List of UniProt IDs
    uniprot_ids = [
        "A7KAX9", "O00159", "O14558", "O14757", "O14974", "O15151", "O15530", "O15553",
        "O43521", "O43524", "O43896", "O60343", "O60825", "O75030", "O75324", "O75376",
        "O75385", "O75791", "O76090", "O94885", "O94921", "O95382", "O95863", "O96013",
        "P00519", "P03372", "P04049", "P04150", "P04233", "P04637", "P05107", "P05556",
        "P05783", "P07101", "P07359", "P08069", "P08151", "P0C1S8", "P10070", "P10071",
        "P10398", "P10636", "P11362", "P13612", "P14136", "P15056", "P16333", "P16471",
        "P17035", "P17302", "P18615", "P19484", "P19634", "P20823", "P20941", "P21127",
        "P21802", "P21980", "P22736", "P23528", "P26045", "P26651", "P27986", "P30291",
        "P30304", "P30305", "P30307", "P32004", "P32927", "P35222", "P35568", "P40818",
        "P41180", "P41181", "P42575", "P43405", "P43681", "P46527", "P46937", "P48552",
        "P48729", "P49450", "P49585", "P49675", "P49757", "P49796", "P49815", "P50549",
        "P52198", "P53350", "P54253", "P55040", "P56524", "P56945", "P57059", "P58340",
        "P61587", "P68431", "P78314", "P78362", "P81274", "P98177", "Q00536", "Q00987",
        "Q02156", "Q02241", "Q04912", "Q06187", "Q07352", "Q07866", "Q07889", "Q12778",
        "Q12802", "Q13009", "Q13049", "Q13094", "Q13105", "Q13164", "Q13309", "Q13322",
        "Q13470", "Q13671", "Q13813", "Q14247", "Q14432", "Q14678", "Q14934", "Q14957",
        "Q14CB8", "Q15418", "Q15569", "Q15831", "Q16613", "Q16695", "Q16890", "Q2M1Z3",
        "Q2PPJ7", "Q53ET0", "Q5PRF9", "Q5S007", "Q5VWQ8", "Q6N021", "Q6P597", "Q6PJF5",
        "Q6PJG9", "Q6R327", "Q6TGC4", "Q7KZI7", "Q7Z3C6", "Q7Z418", "Q7Z5H3", "Q86TI0",
        "Q86UR1", "Q86UR5", "Q86VP3", "Q8IVT5", "Q8IWU9", "Q8IYK8", "Q8N122", "Q8N5S9",
        "Q8NCD3", "Q8ND25", "Q8ND76", "Q8NHG8", "Q8WUI4", "Q8WYL5", "Q92622", "Q92730",
        "Q92934", "Q92974", "Q96B36", "Q96D03", "Q96F86", "Q96IF1", "Q96PU5", "Q96PX8",
        "Q96RK0", "Q96TC7", "Q99683", "Q99759", "Q99959", "Q9BWT1", "Q9BZL4", "Q9GZM8",
        "Q9GZV5", "Q9GZY8", "Q9H0B6", "Q9H0K1", "Q9H1K1", "Q9H1R3", "Q9H6H4", "Q9H8N7",
        "Q9HC77", "Q9NP71", "Q9NPG2", "Q9NQU5", "Q9NS23", "Q9NS28", "Q9NSK0", "Q9NX09",
        "Q9NYF0", "Q9NZJ0", "Q9P0K1", "Q9P0N9", "Q9UBF8", "Q9UJM3", "Q9UJU6", "Q9UK53",
        "Q9UKF7", "Q9UKV0", "Q9UMS4", "Q9UMS6", "Q9UPA5", "Q9UQ26", "Q9UQ84", "Q9UQB8",
        "Q9UQC2", "Q9UQL6", "Q9UQQ2", "Q9Y2J0", "Q9Y2K2", "Q9Y2U5", "Q9Y3C5", "Q9Y3M2",
        "Q9Y4H2", "Q9Y4L5", "Q9Y6J0", "Q9Y6R0", "Q9UGP4"
    ]
    
    longest_regions = []
    for uniprot_id in uniprot_ids:
        aiupred_data = get_iupred(uniprot_id)
        longest_region_length = calculate_longest_disordered_region(aiupred_data)
        longest_regions.append(longest_region_length)


if __name__ == "__main__":
    main()
    print("Script completed.")
